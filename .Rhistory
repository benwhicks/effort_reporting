topFive(all.effort.data)
topFive(df.means)
topFive(df.student)
head(df.student)
df.means <- merge(df.means, student.info, all.x = T)
df.teacher <- df.means[df.means$Source == "Teacher",]
df.teacher$Source <- NULL
df.teacher <- df.teacher %>% spread(key = Category, value = Score)
df.teacher$Effort <- rowMeans(df.teacher[,c("Diligence","Engagement","Behaviour")])
df.student <- df.means[df.means$Source == "Student",]
df.student$Source <- NULL
df.student <- df.student %>% spread(key = Category, value = Score)
df.student$Effort <- rowMeans(df.student[,c("Diligence","Engagement","Behaviour")])
topFive(df.student)
topFive(df.student, category = "Engagement")
topFive(df.student, category = "Engagement", n = 20)
deparse()
department
department
# Filtering for classes based on depratment - currently set to
if (department == "Mathematics") {
department.effort.data <- all.effort.data[grepl("MA",all.effort.data$Class.code),]
}
department == "Mathematics"
#####
# This file requires input of:
# department: the name of the curriculum area
knitr::opts_chunk$set(echo = TRUE)
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE,  cache.extra = packageVersion('tufte'))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(htmltools.dir.version = FALSE)
suppressWarnings(suppressPackageStartupMessages(library(ggplot2)))
suppressWarnings(suppressPackageStartupMessages(library(ggthemes)))
suppressWarnings(suppressPackageStartupMessages(library(dplyr)))
suppressWarnings(suppressPackageStartupMessages(library(tidyr)))
# Setting paths
datdir <- "/Users/benhicks/Documents/Data Analysis/Data-Oxley/Effort Data/2018 Term 1/"
effort.path <- paste0(datdir, "2018 Term 1 Effort Data.csv")
edumate.data.path <- paste0(datdir, "edumate_student_data_180312.csv")
# Getting the data
effort.data <- read.csv(effort.path)
student.info <- read.csv(edumate.data.path, col.names = c("Student.code", "Student.email", "Firstname","Lastname","Student.name","House","Gender","Form","Tutor.group","Reports.email"))
pastEffortPath <- paste0(datdir,"Past Effort Data/")
old_effort_files <- list.files(pastEffortPath, pattern = "*.csv", full.names = T)
past.effort.data <- do.call(rbind,lapply(old_effort_files, read.csv))
ednames <- c("Student.code","Subject","Score","Category","Source","Class.code","Teacher.code","Date")
past.effort.data$Date <- as.Date(past.effort.data$Date)
past.effort.data <- past.effort.data[,names(past.effort.data) %in% ednames]
effort.data <- effort.data[,names(effort.data) %in% ednames]
effort.data <- unique(effort.data)
# Merging data
all.effort.data <- rbind(past.effort.data, effort.data)
# Tidying data types
all.effort.data$Student.code <- as.factor(all.effort.data$Student.code)
all.effort.data$Category <- factor(all.effort.data$Category, levels = c("Diligence", "Engagement","Behaviour"))
dates <- sort(unique(all.effort.data$Date))
last4dates <- dates[min(1,length(dates)-1):length(dates)]
t1 <- dates[length(dates)]
t0 <- dates[length(dates)-1]
# Filtering for classes based on depratment - currently set to Mathematics
department.effort.data <- all.effort.data[grepl("MA",all.effort.data$Class.code),]
df.means <- department.effort.data %>% group_by(Student.code, Date, Category, Source) %>% summarise(Score = mean(Score))
df.means <- merge(df.means, student.info, all.x = T)
df.teacher <- df.means[df.means$Source == "Teacher",]
df.teacher$Source <- NULL
df.teacher <- df.teacher %>% spread(key = Category, value = Score)
df.teacher$Effort <- rowMeans(df.teacher[,c("Diligence","Engagement","Behaviour")])
df.student <- df.means[df.means$Source == "Student",]
df.student$Source <- NULL
df.student <- df.student %>% spread(key = Category, value = Score)
df.student$Effort <- rowMeans(df.student[,c("Diligence","Engagement","Behaviour")])
bigMovers(df.student, category = "Engagement",up = TRUE, n = school_n)
bigMovers(df.student)
bigMovers(df.student, category = "Engagement")
bigMovers <- function(d, c = "Effort",up = TRUE, n = 5) {
d <- effortChange(d, category = c)
d <- d[order(d$Effort.Change, decreasing = up),]
n <- min(length(d$Effort.Change), n)
d$Student.code <- NULL
return(d[1:n,])
}
bigMovers(df.student, c = "Engagement")
effortChange <- function(d, category = "Effort") {
dates <- sort(unique(d$Date))
if (length(dates) < 2) {stop("Less than two dates present: insufficient for change comparison.")}
t_1 <- dates[length(dates)]
t_0 <- dates[length(dates)-1]
d <- d[,c("Student.code","Student.name","Date","House","Form","Gender","Effort")]
d.previous <- d[d$Date == t_0,]
d.latest <- d[d$Date == t_1,]
d.previous$Date <- NULL
d.latest$Date <- NULL
d.previous$Previous.Effort <- d.previous[,category]
d.previous$Effort <- NULL
d.latest$Latest.Effort <- d.latest[,category]
d.latest$Effort <- NULL
d <- merge(d.latest, d.previous)
d$Effort.Change <- d$Latest.Effort - d$Previous.Effort
return(d)
}
department <- 'Mathemtatics'
department <- 'Mathemtatics'
#####
# This file requires input of:
# department: the name of the curriculum area
knitr::opts_chunk$set(echo = TRUE)
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE,  cache.extra = packageVersion('tufte'))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(htmltools.dir.version = FALSE)
suppressWarnings(suppressPackageStartupMessages(library(ggplot2)))
suppressWarnings(suppressPackageStartupMessages(library(ggthemes)))
suppressWarnings(suppressPackageStartupMessages(library(dplyr)))
suppressWarnings(suppressPackageStartupMessages(library(tidyr)))
# Setting paths
datdir <- "/Users/benhicks/Documents/Data Analysis/Data-Oxley/Effort Data/2018 Term 1/"
effort.path <- paste0(datdir, "2018 Term 1 Effort Data.csv")
edumate.data.path <- paste0(datdir, "edumate_student_data_180312.csv")
# Getting the data
effort.data <- read.csv(effort.path)
student.info <- read.csv(edumate.data.path, col.names = c("Student.code", "Student.email", "Firstname","Lastname","Student.name","House","Gender","Form","Tutor.group","Reports.email"))
pastEffortPath <- paste0(datdir,"Past Effort Data/")
old_effort_files <- list.files(pastEffortPath, pattern = "*.csv", full.names = T)
past.effort.data <- do.call(rbind,lapply(old_effort_files, read.csv))
ednames <- c("Student.code","Subject","Score","Category","Source","Class.code","Teacher.code","Date")
past.effort.data$Date <- as.Date(past.effort.data$Date)
past.effort.data <- past.effort.data[,names(past.effort.data) %in% ednames]
effort.data <- effort.data[,names(effort.data) %in% ednames]
effort.data <- unique(effort.data)
# Merging data
all.effort.data <- rbind(past.effort.data, effort.data)
# Tidying data types
all.effort.data$Student.code <- as.factor(all.effort.data$Student.code)
all.effort.data$Category <- factor(all.effort.data$Category, levels = c("Diligence", "Engagement","Behaviour"))
dates <- sort(unique(all.effort.data$Date))
last4dates <- dates[min(1,length(dates)-1):length(dates)]
t1 <- dates[length(dates)]
t0 <- dates[length(dates)-1]
# Filtering for classes based on depratment - currently set to Mathematics
department.effort.data <- all.effort.data[grepl("MA",all.effort.data$Class.code),]
df.means <- department.effort.data %>% group_by(Student.code, Date, Category, Source) %>% summarise(Score = mean(Score))
df.means <- merge(df.means, student.info, all.x = T)
df.teacher <- df.means[df.means$Source == "Teacher",]
df.teacher$Source <- NULL
df.teacher <- df.teacher %>% spread(key = Category, value = Score)
df.teacher$Effort <- rowMeans(df.teacher[,c("Diligence","Engagement","Behaviour")])
df.student <- df.means[df.means$Source == "Student",]
df.student$Source <- NULL
df.student <- df.student %>% spread(key = Category, value = Score)
df.student$Effort <- rowMeans(df.student[,c("Diligence","Engagement","Behaviour")])
# These will already be filterd for Source
topFive <- function(d, category = "Effort", n = 5, top = TRUE) {
# houseSummaryData as prepared earlier in file - must have the fields:
# If top = FALSE then this function returns the bottom n students
# sorting data
d <- d[order(d[,category], decreasing = top),]
d <- d[,c("Student.name","House","Form","Gender",category)]
# outputting top n
n <- min(length(d[,category]),n)
d <- d[1:n,]
return(d)
}
effortChange <- function(d, category = "Effort") {
dates <- sort(unique(d$Date))
if (length(dates) < 2) {stop("Less than two dates present: insufficient for change comparison.")}
t_1 <- dates[length(dates)]
t_0 <- dates[length(dates)-1]
d <- d[,c("Student.code","Student.name","Date","House","Form","Gender","Effort")]
d.previous <- d[d$Date == t_0,]
d.latest <- d[d$Date == t_1,]
d.previous$Date <- NULL
d.latest$Date <- NULL
d.previous$Previous.Effort <- d.previous[,category]
d.previous$Effort <- NULL
d.latest$Latest.Effort <- d.latest[,category]
d.latest$Effort <- NULL
d <- merge(d.latest, d.previous)
d$Effort.Change <- d$Latest.Effort - d$Previous.Effort
return(d)
}
bigMovers <- function(d, c = "Effort",up = TRUE, n = 5) {
d <- effortChange(d, category = c)
d <- d[order(d$Effort.Change, decreasing = up),]
n <- min(length(d$Effort.Change), n)
d$Student.code <- NULL
return(d[1:n,])
}
formToYear <- function(form) {
require(dplyr)
# Works with form in the, ahum, 'form':
# "2018 Year 09"
# Extracting last 2 digits as number
form <- as.character(form)
year <- as.numeric(substr(form, nchar(form)-1, nchar(form)))
return(year)
}
effortChange(df.student, category = "Engagement")
names(df.student)
d <- df.student
dates <- sort(unique(d$Date))
if (length(dates) < 2) {stop("Less than two dates present: insufficient for change comparison.")}
t_1 <- dates[length(dates)]
t_0 <- dates[length(dates)-1]
d <- d[,c("Student.code","Student.name","Date","House","Form","Gender","Effort")]
d <- d[,c("Student.code","Student.name","Date","House","Form","Gender",category)]
category <- "Engagement"
d <- d[,c("Student.code","Student.name","Date","House","Form","Gender",category)]
c("Student.code","Student.name","Date","House","Form","Gender",category)
names(d)
d <- df.student
d <- d[,c("Student.code","Student.name","Date","House","Form","Gender",category)]
d.previous <- d[d$Date == t_0,]
d.latest <- d[d$Date == t_1,]
d.previous$Date <- NULL
d.latest$Date <- NULL
d.previous$Previous.Effort <- d.previous[,category]
d.previous$Effort <- NULL
d.latest$Latest.Effort <- d.latest[,category]
d.latest$Effort <- NULL
d <- merge(d.latest, d.previous)
d$Effort.Change <- d$Latest.Effort - d$Previous.Effort
effortChange <- function(d, category = "Effort") {
dates <- sort(unique(d$Date))
if (length(dates) < 2) {stop("Less than two dates present: insufficient for change comparison.")}
t_1 <- dates[length(dates)]
t_0 <- dates[length(dates)-1]
d <- d[,c("Student.code","Student.name","Date","Form","Gender",category)]
d.previous <- d[d$Date == t_0,]
d.latest <- d[d$Date == t_1,]
d.previous$Date <- NULL
d.latest$Date <- NULL
d.previous[,paste0("Previous.",category)] <- d.previous[,category]
d.previous[,category] <- NULL
d.latest[,paste0("Latest.",category)] <- d.latest[,category]
d.latest[,category] <- NULL
d <- merge(d.latest, d.previous)
d[,paste0(category, ".Change")] <- d[,paste0("Latest.",category)] - d[,paste0("Previous.",category)]
return(d)
}
effortChange(d, category = "Engagement")
d <- df.student
dates <- sort(unique(d$Date))
if (length(dates) < 2) {stop("Less than two dates present: insufficient for change comparison.")}
t_1 <- dates[length(dates)]
t_0 <- dates[length(dates)-1]
d <- d[,c("Student.code","Student.name","Date","Form","Gender",category)]
d.previous <- d[d$Date == t_0,]
d.latest <- d[d$Date == t_1,]
d.previous$Date <- NULL
d.latest$Date <- NULL
d.previous[,paste0("Previous.",category)] <- d.previous[,category]
names(d.previous)
d.previous[,category] <- NULL
d.latest[,paste0("Latest.",category)] <- d.latest[,category]
d.latest[,category] <- NULL
d <- merge(d.latest, d.previous)
d[,paste0(category, ".Change")] <- d[,paste0("Latest.",category)] - d[,paste0("Previous.",category)]
head(department.effort.data)
g <- ggplot(department.effort.data[department.effort.data$Category == "Engagement",])
g + geom_violin()
g + geom_violin(aes(Score))
g + geom_violin(aes(y = Score))
g + geom_violin(aes(x = Class.code, y = Score))
g + geom_violin(aes(x = Teacher.code, y = Score))
g + geom_violin(aes(x = Teacher.code, y = Score), binsize = 1)
?geom_violin
g + geom_violin(aes(x = Teacher.code, y = Score), bw = 1)
g + geom_violin(aes(x = Teacher.code, y = Score), bw = .9)
g + geom_violin(aes(x = Teacher.code, y = Score), bw = .7)
g + geom_violin(aes(x = Teacher.code, y = Score), bw = .5)
g + geom_violin(aes(x = Date, y = Score), bw = .7)
g + geom_violin(aes(x = Date, y = Score), bw = .7) + facet_wrap(~ Date)
g + geom_violin(aes(x = as.factor(Date), y = Score), bw = .7) + facet_wrap(~ Date)
g + geom_violin(aes(x = as.factor(Date), y = Score), bw = .7)
g + geom_violin(aes(x = as.factor(Date), y = Score), bw = .5)
names(department.effort.data)
cc <- "10MAT.X"
cc
cc[1]
cc[[1]]
substr(cc, 1)
substr(cc, 1, 2)
substr(cc, 1, 1)
yearFromClassCode <- function(x) {
if (substr(x, 1, 2) == "12") {return(12)}
if (substr(x, 1, 2) == "11") {return(11)}
if (substr(x, 1, 2) == "10") {return(10)}
if (substr(x, 1, 1) == "9") {return(9)}
if (substr(x, 1, 1) == "8") {return(8)}
if (substr(x, 1, 1) == "7") {return(7)}
}
maths.dat <- department.effort.data %>% mutate(Year = yearFromClassCode(Class.code))
yearFromClassCode(cc)
yearFromClassCode("")
yearFromClassCode <- function(x) {
if (x == "") {return(NA)}
else if (substr(x, 1, 2) == "12") {return(12)}
else if (substr(x, 1, 2) == "11") {return(11)}
else if (substr(x, 1, 2) == "10") {return(10)}
else if (substr(x, 1, 1) == "9") {return(9)}
else if (substr(x, 1, 1) == "8") {return(8)}
else if (substr(x, 1, 1) == "7") {return(7)}
else {return(NA)}
}
maths.dat <- department.effort.data %>% mutate(Year = yearFromClassCode(Class.code))
head(maths.dat)
class(Year)
class(maths.dat$Year)
g <- ggplot(data = maths.dat[maths.dat$Category == "Engagement",])
g + geom_violin(aes(Date, Score), bw = .5)
g + geom_violin(aes(as.factor(Date), Score), bw = .5)
g + geom_violin(aes(as.factor(Date), Score), bw = .5) + facet_wrap(~ Year)
View(maths.dat)
yearFromClassCode("11MA")
yearFromClassCode("12MA")
yearFromClassCode("7MA")
yearFromClassCode("8MA")
maths.dat$Year <- yearFromClassCode(maths.dat$Class.code)
substr("10MAT.X", 1, 2)
substr("10MAT.X", 1, 2) == 1
substr("10MAT.X", 1, 2) == 10
unique(maths.dat$Year)
unique(maths.dat$Class.code)
yearFromClassCode(maths.dat$Class.code)
lapply(maths.dat$Class.code, yearFromClassCode)
sapply(maths.dat$Class.code, yearFromClassCode)
maths.dat$Year <- sapply(maths.dat$Class.code, yearFromClassCode)
g <- ggplot(data = maths.dat[maths.dat$Category == "Engagement",])
g + geom_violin(aes(as.factor(Date), Score), bw = .5) + facet_wrap(~ Year)
names(maths.dat)
maths.dat <- merge(maths.dat, student.info, all.x = T)
g <- ggplot(data = maths.dat[maths.dat$Category == "Engagement",])
g + geom_violin(aes(as.factor(Date), Score, color = Gender), bw = .5) + facet_wrap(~ Year)
g + geom_violin(aes(as.factor(Date), Score, color = Form), bw = .5) + facet_wrap(~ Year)
g + geom_violin(aes(as.factor(Date), Score, color = Year), bw = .5) + facet_wrap(~ Form)
names(all.effort.data)
knitr::opts_chunk$set(echo = TRUE)
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE,  cache.extra = packageVersion('tufte'))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(htmltools.dir.version = FALSE)
suppressWarnings(suppressPackageStartupMessages(library(ggplot2)))
suppressWarnings(suppressPackageStartupMessages(library(ggthemes)))
suppressWarnings(suppressPackageStartupMessages(library(dplyr)))
suppressWarnings(suppressPackageStartupMessages(library(tidyr)))
# Setting paths
datdir <- "/Users/benhicks/Documents/Data Analysis/Data-Oxley/Effort Data/2018 Term 1/"
effort.path <- paste0(datdir, "2018 Term 1 Effort Data.csv")
edumate.data.path <- paste0(datdir, "edumate_student_data_180312.csv")
# Getting the data
effort.data <- read.csv(effort.path)
student.info <- read.csv(edumate.data.path, col.names = c("Student.code", "Student.email", "Firstname","Lastname","Student.name","House","Gender","Form","Tutor.group","Reports.email"))
houses <- c("Dobell","Durack","Florey","Mawson","Monash","Oodgeroo")
house_colours <- c("#33CC33","#6600CC","#DDDD00","#0099FF","#CC0000","#FF9900")
house_colours_alt <- c("#338833","#550088","#999900","#0055BB","#880000","#BB5500")
pastEffortPath <- paste0(datdir,"Past Effort Data/")
old_effort_files <- list.files(pastEffortPath, pattern = "*.csv", full.names = T)
past.effort.data <- do.call(rbind,lapply(old_effort_files, read.csv))
ednames <- c("Student.code","Subject","Score","Category","Source","Class.code","Teacher.code","Date")
past.effort.data$Date <- as.Date(past.effort.data$Date)
past.effort.data <- past.effort.data[,names(past.effort.data) %in% ednames]
effort.data <- effort.data[,names(effort.data) %in% ednames]
effort.data <- unique(effort.data)
# Merging data
all.effort.data <- rbind(past.effort.data, effort.data)
# Tidying data types
all.effort.data$Student.code <- as.factor(all.effort.data$Student.code)
all.effort.data$Category <- factor(all.effort.data$Category, levels = c("Diligence", "Engagement","Behaviour"))
dates <- sort(unique(all.effort.data$Date))
last4dates <- dates[min(1,length(dates)-1):length(dates)]
t1 <- dates[length(dates)]
t0 <- dates[length(dates)-1]
df.means <- all.effort.data %>% group_by(Student.code, Date, Category, Source) %>% summarise(Score = mean(Score))
df.teacher <- df.means[df.means$Source == "Teacher",]
df.teacher$Source <- NULL
df.teacher <- df.teacher %>% spread(key = Category, value = Score)
df.teacher$Effort <- rowMeans(df.teacher[,c("Diligence","Engagement","Behaviour")])
df.house.summary <- merge(df.teacher, student.info[,c("Student.code","Student.name","House","Form","Gender")])
df.house.summary <- df.house.summary[df.house.summary$House %in% houses,]
write.csv(df.house.summary, file = paste0(datdir, "pastoral_summary_2018t1.csv"), row.names = F)
names(df.house.summary
)
percentile
?percent_rank
df.cohort.percentiles <- df.house.summary %>% group_by("Student.code","Date","Form") %>% summarise(Cohort.percentile = 100*percent_rank(Effort))
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = 100*percent_rank(Effort))
head(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = 100.*percent_rank(Effort))
head(df.cohort.percentiles)
unique(df.cohort.percentiles$Cohort.percentile)
?quantile
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = quantile(Effort, probs = seq(0, 1, by = 0.01)))
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = percent_rank(Effort)))
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = percent_rank(Effort))
head(df.cohort.percentiles)
View(df.cohort.percentiles)
?percent_rank
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = percent_rank(Effort, 100))
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = percent_rank(Effort, n =100))
?summarise
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form) %>% summarise(Cohort.percentile = percent_rank(Effort))
View(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form, Effort) %>% summarise(Cohort.percentile = percent_rank(Effort))
View(df.cohort.percentiles)
?rank
perc.rank <- function(x) trunc(rank(x))/length(x)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form, Effort) %>% summarise(Cohort.percentile = perc.rank(Effort))
perc.rank <- function(x) trunc(rank(x))/length(x)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form, Effort) %>% summarise(Cohort.percentile = perc.rank(Effort))
head(df.cohort.percentiles)
View(df.cohort.percentiles)
perc.rank <- function(x, xo) length(x[x <= xo])/length(x)*100
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code,Date,Form, Effort) %>% summarise(Cohort.percentile = perc.rank(Effort))
percentile(df.house.summary$Effort)
quantile(df.house.summary$Effort)
quantile(df.house.summary$Effort, probs = seq(1,0,0.01))
quantile(df.house.summary$Effort, probs = seq(1,0,0.01), na.rm = T)
?quantile
quantile(df.house.summary$Effort, probs = seq(1,0,0.01), na.rm = T)
perc.rank(df.house.summary$Effort, 4)
perc.rank(df.house.summary$Effort, 5)
perc.rank(df.house.summary$Effort, 3)
df.cohort.percentiles <- df.house.summary %>% mutate(cohort.percentile = perc.rank(df.house.summary[df.house.summary$Form == Form & df.house.summary$Date == Date, "Effort"], Effort))
head(df.cohort.percentiles)
View(df.house.summary)
head(df.cohort.percentiles)
View(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% mutate(cohort.percentile = perc.rank(df.house.summary[df.house.summary$Form == Form && df.house.summary$Date == Date, "Effort"], Effort))
View(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code, Form, Date)
head(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code, Form, Date) %>% summarise(rank = percent_rank(Effort))
head(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Student.code, Form, Date) %>% summarise(rank = dense_rank(Effort))
df.cohort.percentiles
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% summarise(rank = percent_rank(Effort))
df.cohort.percentiles
cohort.rank <- function(effort, form, date, df) {
df <- df[df$Form == form,]
df <- df[df$Date == date,]
x <- df$Effort
return(length(x[x <= effort])/length(x))
}
crank <- function(effort, form, date, df) {
df <- df[df$Form == form,]
df <- df[df$Date == date,]
x <- df$Effort
return(length(x[x <= effort])/length(x))
}
df.cohort.percentiles <- df.house.summary %>% mutate(cohort.rank = crank(Effort, Form, Date, df.house.summary))
head(df.cohort.percentiles)
View(df.cohort.percentiles)
crank <- function(effort, form, date, df) {
df <- df[df$Form == form,]
df <- df[df$Date == date,]
x <- df$Effort
return(length(x[x <= effort])/length(x)*100)
}
df.cohort.percentiles <- df.house.summary %>% mutate(cohort.rank = crank(Effort, Form, Date, df.house.summary))
View(df.cohort.percentiles)
crank <- function(effort, form, date, df) {
df <- df[df$Form == form,]
df <- df[df$Date == date,]
x <- df$Effort
return(100.0*length(x[x <= effort])/length(x))
}
df.cohort.percentiles <- df.house.summary %>% mutate(cohort.rank = crank(Effort, Form, Date, df.house.summary))
View(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% mutate_each(cohort.rank = crank(Effort, Form, Date, df.house.summary))
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = percent_rank(Effort))
View(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort))
names(df.cohort.percentiles)
df.cohort.percentiles <- df.cohort.percentiles[df.cohort.percentiles$Date >= t0,]
unique(df.cohort.percentiles)
unique(df.cohort.percentiles$Date)
?spread
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort))
df.cohort.percentiles <- df.cohort.percentiles[df.cohort.percentiles$Date >= t0, c("Student.code","Date","pr")]
df.cohort.percentiles <- df.cohort.percentiles %>% spread(key = Date, value = pr)
head(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(round(pr = 100*percent_rank(Effort),3))
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(round(pr = 100*percent_rank(Effort),3)))
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort),3))
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort))
df.cohort.percentiles$pr <- round(df.cohort.percentiles$pr, 3)
df.cohort.percentiles$pr
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort))
df.cohort.percentiles$pr <- round(df.cohort.percentiles$pr, 1)
df.cohort.percentiles <- df.cohort.percentiles[df.cohort.percentiles$Date >= t0, c("Student.code","Date","pr")]
df.cohort.percentiles <- df.cohort.percentiles %>% spread(key = Date, value = pr)
df.cohort.percentiles$Percentile.change <- paste0(df.cohort.percentiles[,t0], " to ", df.cohort.percentiles[,t1])
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort))
df.cohort.percentiles$pr <- round(df.cohort.percentiles$pr, 1)
df.cohort.percentiles <- df.cohort.percentiles[df.cohort.percentiles$Date >= t0, c("Student.code","Date","pr")]
df.cohort.percentiles <- df.cohort.percentiles %>% spread(key = Date, value = pr)
df.cohort.percentiles$Percentile.change <- paste0(df.cohort.percentiles[,as.character(t0)], " to ", df.cohort.percentiles[,as.character(t1)])
head(df.cohort.percentiles)
View(df.cohort.percentiles)
df.cohort.percentiles <- df.house.summary %>% group_by(Form, Date) %>% mutate(pr = 100*percent_rank(Effort))
df.cohort.percentiles$pr <- round(df.cohort.percentiles$pr, 1)
df.cohort.percentiles <- df.cohort.percentiles[df.cohort.percentiles$Date >= t0, c("Student.code","Date","pr")]
df.cohort.percentiles <- df.cohort.percentiles %>% spread(key = Date, value = pr)
names(df.cohort.percentiles) <- c("Student.code", "t0", "t1")
df.cohort.percentiles <- df.cohort.percentiles %>% mutate(Percentile.change = paste0(t0, " to ", t1) )
head(df.cohort.percentiles)
dim(all.effort.data)
write.csv(all.effort.data, file = "~/Desktop/effort.data.20180405.csv", row.names = F)
